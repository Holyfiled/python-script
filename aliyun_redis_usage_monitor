import json
import math
import datetime
import logging
from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdkcms.request.v20190101.DescribeMetricListRequest import DescribeMetricListRequest
from aliyunsdkr_kvstore.request.v20150101.DescribeInstancesRequest import DescribeInstancesRequest
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


redisInstancesId = set()
reddisMemUsageRatio = 60


def getRedisPage(ak, sk, region):
    client = AcsClient(ak, sk, region)
    request = DescribeInstancesRequest()
    request.set_accept_format('json')
    response = client.do_action_with_exception(request)
    redis_dict = json.loads(response)
    total_instance = redis_dict["TotalCount"]
    logging.info("total instance number is %s" % (total_instance))
    pages = math.ceil(total_instance / 100)
    return pages


def getRedisInstancesList(ak, sk, region):
    logging.info("start get redis instance in %s" % (region))
    pages = getRedisPage(ak, sk, region)
    redis_instance_id_list = set()
    redis_instance_cluster_id_list = set()
    try:
        for page in range(1, pages+1):
            client = AcsClient(ak, sk, region)
            request = DescribeInstancesRequest()
            request.set_accept_format('json')
            request.set_PageSize(100)
            request.set_PageNumber(page)
            response = client.do_action_with_exception(request)
            redis_dict = json.loads(response)
            redis_instance = redis_dict["Instances"]["KVStoreInstance"]
            for item in redis_instance:
                redis_instance_id = item["InstanceId"]
                redis_arch = item["ArchitectureType"]
                if redis_arch == 'cluster':
                    redis_instance_cluster_id_list.add(redis_instance_id)
                else:
                    redis_instance_id_list.add(redis_instance_id)
        return redis_instance_id_list, redis_instance_cluster_id_list
    except Exception as ex:
        logging.error(ex)


def get_start_timestamp():
    start_datetime = datetime.datetime.now() - datetime.timedelta(minutes=6)
    start_timestamp = int(start_datetime.timestamp()*1000)
    return start_timestamp


def get_end_timestamp():
    end_datetime = datetime.datetime.now() - datetime.timedelta(minutes=5)
    end_timestamp = int(end_datetime.timestamp()*1000)
    return end_timestamp


def getRedisMetrics(ak, sk, region, instanceID):
    instance_id = {"instanceId":instanceID}
    client = AcsClient(ak, sk, region)
    request = DescribeMetricListRequest()
    request.set_StartTime(get_start_timestamp())
    request.set_EndTime(get_end_timestamp())
    request.set_Dimensions(instance_id)
    request.set_Period("60")
    request.set_Namespace("acs_kvstore")
    request.set_MetricName("StandardMemoryUsage")
    response = client.do_action_with_exception(request)
    result = json.loads(response)
    result_2 = eval(result['Datapoints'][1:-1])
    redis_timestamp = result_2['timestamp']
    redisMemTime = datetime.datetime.fromtimestamp(redis_timestamp/1000)
    redis_instance_id = result_2['instanceId']
    redis_mem_usage = result_2['Maximum']
    redisInstancesId.add(redis_instance_id)
    if redis_mem_usage >= reddisMemUsageRatio:
        print(str(redisMemTime)+" "+redis_instance_id+" "+str(redis_mem_usage))


def getRedisClusterMetrics(ak, sk, region, instanceID):
    instance_id = {"instanceId":instanceID}
    client = AcsClient(ak, sk, region)
    request = DescribeMetricListRequest()
    request.set_StartTime(get_start_timestamp())
    request.set_EndTime(get_end_timestamp())
    request.set_Dimensions(instance_id)
    request.set_Period("60")
    request.set_Namespace("acs_kvstore")
    request.set_MetricName("ShardingMemoryUsage")
    response = client.do_action_with_exception(request)
    result = json.loads(response)
    result_2 = json.loads(result['Datapoints'])
    for l1 in result_2:
        redis_timestamp = l1['timestamp']
        redisMemTime = datetime.datetime.fromtimestamp(redis_timestamp/1000)
        redis_instance_id = l1['nodeId']
        redis_mem_usage = l1['Maximum']
        redisInstancesId.add(redis_instance_id)
        if redis_mem_usage >= reddisMemUsageRatio:
            print(str(redisMemTime)+" "+redis_instance_id+" "+str(redis_mem_usage))


def main():
    aliyun_ak = '123'
    aliyun_sk = '456'
    aliyun_region = ['cn-hangzhou', 'cn-shenzhen', 'cn-hongkong', 'ap-northeast-1', 'us-west-1']
    for region in aliyun_region:
        redisStandardInstanceID, redisClusterInstanceID = getRedisInstancesList(aliyun_ak, aliyun_sk, region)
        for redisInstanceId in redisStandardInstanceID:
            getRedisMetrics(aliyun_ak, aliyun_sk, region, redisInstanceId)
        for redisClusterInstanceId in redisClusterInstanceID:
            getRedisClusterMetrics(aliyun_ak, aliyun_sk, region, redisClusterInstanceId)
    logging.info('All region redis instance numbers: %d' % (len(redisInstancesId)))


if __name__ == '__main__':
    main()
